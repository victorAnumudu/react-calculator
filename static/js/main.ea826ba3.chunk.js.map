{"version":3,"sources":["component/Button.js","component/SpecialButton.js","App.js","component/Result.js","component/UserInput.js","serviceWorker.js","index.js"],"names":["Button","props","value","onClick","e","SpecialButton","name","App","handleButtonClick","setState","userInput","state","target","handleSpecialButtonClick","result","eval","newValue","slice","length","this","className","userinput","Component","Result","type","disabled","UserInput","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ea826ba3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nfunction Button (props) {\r\n    return(\r\n    <button value={props.value} onClick={(e) =>props.onClick(e)}>{props.value}</button>\r\n    )\r\n}\r\n\r\nexport default Button;","import React from \"react\";\r\n\r\n\r\nfunction SpecialButton (props) {\r\n    return(\r\n    <button name={props.name} onClick={props.onClick}>{props.value}</button>\r\n    )\r\n}\r\n\r\nexport default SpecialButton;","import React, { Component } from 'react';\nimport Result from \"./component/Result\";\nimport UserInput from \"./component/UserInput\";\nimport Button from \"./component/Button\";\nimport SpecialButton from \"./component/SpecialButton\";\n// import logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      userInput: \"\",\n      result: \"\"\n    }\n  }\n\n  handleButtonClick = (e) => {\n    \n    this.setState({\n      userInput: this.state.userInput + e.target.value\n    })\n\n  }\n\n  // handleButtonOperatorClick = (e) => {\n  //   let value = e.target.innerHTML;\n  //   this.setState({\n  //     userInput: this.state.userInput + value,\n  //     result: \"\"\n  //   })\n  // }\n\n  handleSpecialButtonClick = (e) => {\n    let name = e.target.name;\n    let value = this.state.userInput;\n    \n    if(name == \"equality\"){\n      this.setState({\n        result: eval(value)\n      })\n    } else if(name == \"del\"){\n      let newValue = value.slice(0, value.length-1)\n      if(value.length < 2) {\n        this.setState({\n          userInput: \"\",\n            result: \"\"\n          })\n      } else {\n        this.setState({\n          userInput: newValue,\n            result: \"\"\n          })\n      }\n    } else if(name == \"cls\"){\n      this.setState({\n      userInput: \"\",\n        result: \"\"\n      })\n    } \n  }\n\n  render () {\n    let {userInput, result} = this.state;\n    return (\n      <div className=\"App\">\n\n        <UserInput userinput={userInput} />\n\n        <Result result={result} />\n\n        <div className=\"my-button\">\n          <Button value={7} onClick = {this.handleButtonClick} />\n          <Button value={8} onClick = {this.handleButtonClick} />\n          <Button value={9} onClick = {this.handleButtonClick} />\n          <Button value={\"+\"} onClick = {this.handleButtonClick} />\n        </div>\n\n        <div className=\"my-button\">\n          <Button value={4} onClick = {this.handleButtonClick} />\n          <Button value={5} onClick = {this.handleButtonClick} />\n          <Button value={6} onClick = {this.handleButtonClick} />\n          <Button value={\"-\"} onClick = {this.handleButtonClick} />\n        </div>\n\n        <div className=\"my-button\">\n          <Button value={1} onClick = {this.handleButtonClick} />\n          <Button value={2} onClick = {this.handleButtonClick} />\n          <Button value={3} onClick = {this.handleButtonClick} />\n          <Button value={\"*\"} onClick = {this.handleButtonClick} />\n        </div>\n\n        <div className=\"my-button\">\n          <SpecialButton value= \"CE\" name=\"cls\" onClick={this.handleSpecialButtonClick} />\n          <Button value={0} onClick = {this.handleButtonClick} />\n          <SpecialButton value=\"Del\" name=\"del\" onClick={this.handleSpecialButtonClick} />\n          <SpecialButton value=\"=\" name=\"equality\" onClick={this.handleSpecialButtonClick} />\n        </div>\n        \n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","\r\nimport React from 'react';\r\n\r\nfunction Result (props) {\r\n    return(\r\n      <div className=\"result\">\r\n        <input type=\"text\" value={props.result} disabled={true} />\r\n      </div>\r\n    )\r\n  }\r\n  export default Result","\r\n\r\nimport React from 'react';\r\n\r\nfunction UserInput (props) {\r\n    return(\r\n      <div className=\"user-input\">\r\n        <input type=\"text\" value={props.userinput} disabled={true} />\r\n      </div>\r\n    )\r\n  }\r\n  export default UserInput","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}